<%include>global.ecpp</%include>
<%pre>

#include <time.h>
#include <stdlib.h>
#include <cxxtools/iconverter.h>
#include <tnt/httperror.h>

unsigned int seed = static_cast<unsigned int>(time(0));

</%pre>
<%cpp>

  zim::File articlesFile = files.getFirstFile('A');
  if (!articlesFile)
    throw std::runtime_error("articlefile not found");

  do
  {
    zim::size_type idx = static_cast<zim::size_type>(static_cast<double>(articlesFile.getCountArticles()) * rand_r(&seed) / RAND_MAX);

    article = articlesFile.getArticle(idx);
    log_debug("consider article " << article.getIndex() << ": " << article.getTitle());
    log_debug("mime-type: " << article.getLibraryMimeType() << " namespace: " << article.getNamespace());

  } while (article.getLibraryMimeType() != zim::Dirent::zimMimeTextHtml
        || article.getNamespace() != 'A');

  log_info("choose article " << article.getIndex() << ": " << article.getTitle());

  if (!RedirectNumeric)
    reply.redirect('/' + article.getUrl().toUtf8());

  std::ostringstream url;
  url << "/!/" << article.getIndex();
  reply.redirect(url.str());

  if (article.getLibraryMimeType() != zim::Dirent::zimMimeTextHtml)
  {
    log_debug("send non-html data");
    callComp("article", request, reply, qparam);
    return HTTP_OK;
  }

  title = article.getTitle();

  int type = request.getPathInfo()[0] == '-' ? typeSpecial : typeArticle;

</%cpp>
<& skin qparam nextComp="article" type=(type) >
