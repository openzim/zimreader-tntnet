<%include>global.ecpp</%include>
<%application>
bool lastFoundUtf8(true);
</%application>
<%cpp>

  if (request.getArgs().size() == 0)
    return DECLINED;

  std::string host = request.getHeader(tnt::httpheader::host);
  if (host.empty())
    host = "localhost";

  title.clear();

  char ns = request.getArgDef(0, "A").at(0);

  zim::QUnicodeString pathInfo = lastFoundUtf8 ? zim::QUnicodeString::fromUtf8(request.getPathInfo())
                                               : zim::QUnicodeString::fromIso8859_15(request.getPathInfo());

  zim::QUnicodeString pathInfoAlt = lastFoundUtf8 ? zim::QUnicodeString::fromIso8859_15(request.getPathInfo())
                                                  : zim::QUnicodeString::fromUtf8(request.getPathInfo());

  if (!article.good() || article.getUrl() != pathInfo && article.getUrl() != pathInfoAlt)
  {
    log_info("search article \"" << pathInfo << "\" namespace " << ns << " encoding " << (lastFoundUtf8 ? "utf-8" : "iso-8859-1"));
    article = articleFile.getArticle(ns, pathInfo);
  }
  else
    log_debug("use previous article " << (lastFoundUtf8 ? pathInfo : pathInfoAlt));

  if (!article.good())
  {
    if (pathInfoAlt != pathInfo)
    {
      log_debug("article not found with last encoding - try other one");
      // different encoding has other result - try this one
      log_info("search article \"" << pathInfoAlt << "\" encoding " << (lastFoundUtf8 ? "iso-8859-1" : "utf-8"));
      article = articleFile.getArticle(ns, pathInfoAlt);
    }

    if (article.good())
    {
      lastFoundUtf8 = !lastFoundUtf8;
      log_debug("switch to " << (lastFoundUtf8 ? "utf-8" : "iso-8859-1"));
    }
    else
    {
      log_warn("article " << pathInfo << " not found");
      return DECLINED;
    }
  }

  log_info("article " << pathInfo << " fetched - mime-type "
    << article.getLibraryMimeType() << " redirect " << article.isRedirect());
  log_debug("article index=" << article.getIndex());

  std::string ifModifiedSince = request.getHeader(tnt::httpheader::ifModifiedSince);
  std::string mTime = tnt::HttpMessage::htdate(articleFile.getMTime());
  log_debug("ifModifiedSince=\"" << ifModifiedSince << "\" mTime=\"" << mTime << '"');
  if (!ifModifiedSince.empty() && ifModifiedSince == mTime)
  {
    log_debug("not modified");
    return HTTP_NOT_MODIFIED;
  }
  reply.setHeader(tnt::httpheader::lastModified, mTime);

  if (article.isRedirect())
  {
    article = article.getRedirectArticle();
    log_debug("redirect to " << article.getTitle().toUtf8());
    return reply.redirect(article.getTitle().toUtf8());
  }
  else if (article.getLibraryMimeType() != zim::zimMimeTextHtml)
  {
    log_debug("send non-html data");
    callComp("article", request, reply, qparam);
    return HTTP_OK;
  }

  title = article.getTitle();

  int type = request.getPathInfo()[0] == '-' ? typeSpecial
           : article.getNamespace() == 'Q'   ? typeHistory
           : typeArticle;

</%cpp>
<& skin qparam nextComp="article" type=(type) >
